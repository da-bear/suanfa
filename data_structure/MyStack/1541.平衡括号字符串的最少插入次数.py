"""
题目：
    给你一个括号字符串 s ，它只包含字符 '(' 和 ')' 。一个括号字符串被称为平衡的当它满足：
        任何左括号 '(' 必须对应两个连续的右括号 '))'
        左括号 '(' 必须在对应的连续两个右括号 '))' 之前。

    你可以在任意位置插入字符 '(' 和 ')' 使字符串平衡。
    请你返回让 s 平衡的最少插入次数。

    输入：s = "(()))"
    输出：1
    解释：第二个左括号有与之匹配的两个右括号，但是第一个左括号只有一个右括号。
        我们需要在字符串结尾额外增加一个 ')' 使字符串变成平衡字符串 "(())))" 。
"""


def minInsertions(s):
    # 维护左括号的的个数以及差人的次数
    insertions = leftCount = index = 0
    # index 是下标
    while index < len(s):
        # 遇到左括号，将左括号啊的个数加1，下标加1
        if s[index] == '(':
            leftCount += 1
            index += 1
        else:
            # 遇到右括号， 分两步，一是和前面的左括号进行匹配，二是确保右两个连续的右括号
            if leftCount > 0:
                # 如果左括号个数大于0，说明前面右左括号可以匹配，需要将左括号的个数减1
                leftCount -= 1
            else:
                # 前面没有左括号可以匹配添加一个左括号，操作数加1
                insertions += 1
            # 确保有两个连续的右括号
            if index < len(s) - 1 and s[index + 1] == ')':
                # 如果后面是两个右括号，下标+2
                index += 2
            else:
                # 否则需要在当前位置的后面插入一个右括号，因此将插入次数加1，并将下标1
                insertions += 1
                index += 1
    # 遍历结束后，需要检查左括号的个数是否为0，如果不为0，说明有左括号未匹配
    insertions += leftCount * 2
    return insertions




