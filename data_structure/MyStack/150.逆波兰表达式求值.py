"""
    题目：给你一个字符串数组tokens，表示一个根据逆波兰表示法表示的算术表达式。
         请你计算该表达式。返回一个表示表达式值的整数

    注意：
        有效 的 算符为 '+'、'-'、'*' 和 '/' 。
        每个操作数（运算对象）都可以是一个整数或者另一个表达式。
        两个整数之间的除法总是 向零截断 。
        表达式中不含除零运算。
        输入是一个根据逆波兰表示法表示的算术表达式。
        答案及所有中间计算结果可以用 32 位 整数表示。

分析：
    逆波兰表达式发明出来就是为了方便计算机运用「栈」进行表达式运算的，其运算规则如下：
    按顺序遍历逆波兰表达式中的字符，如果是数字，则放入栈；如果是运算符，则将栈顶的两个元素拿出来进行运算，再将结果放入栈。
    对于减法和除法，运算顺序别搞反了，栈顶第二个数是被除（减）数。
    所以这题很简单，直接按照运算规则借助栈计算表达式结果即可。
"""


def evalRPN(tokens):
    stk = []
    for ch in tokens:
        if ch in ['+', '-', '*', '/']:
            a = stk.pop()
            b = stk.pop()
            if ch == "+":
                stk.append(a + b)
            elif ch == "*":
                stk.append(a * b)
            elif ch == "-":
                stk.append(b / a)
            elif ch == "-":
                stk.append(int(b - a))
        else:
            stk.append(int(ch))

    return stk.pop()


if __name__ == '__main__':
    t = ["2", "1", "+", "3", "*"]
    print(evalRPN(t))